》 git config --global = 내 컴퓨터에 전반적으로 설정을 하겠다

》 git config --global user.name "이름"
》 git config --global user.email "본인 이메일"

》 git config --global uesr.name < 이름 확인
》 git config --global user.email < 이메일 확인
현재입력 EndDefault , sun

》 git config --global init.defaultBranch main 
master와 slave가 기본이지만 요즘은 main을 건장함

★★★★★★★★
git init > 폴더에 숨겨진 폴더가 생김(.git)
이걸통해서 git의 관리하에 둘 수 있음

》 git status
현재 폴더에서 현재 폴더의 상황을 git의 관점에서 보여주는 것
(git이 관리하고 있는 폴더를)

.gitignore 이름의 파일 생성 > 안에 원하는 파일의 이름을 넣음 
git관리 폴더 안에 있는 파일중 git의 관리가 필요없는 파일 표시

종류들 gitignore형식을 검색하여 더 다양한 형식을 알 수 있음
──────────────────────────────
# 모든 file.c
file.c

# 최상위 폴더의 file.c
/file.c

# 모든 .c 확장자 파일
*.c

# .c 확장자지만 무시하지 않을 파일
!not_ignore_this.c

# logs란 이름의 파일 또는 폴더와 그 내용들
logs

# logs란 이름의 폴더와 그 내용들
logs/

# logs 폴더 바로 안의 debug.log와 .c 파일들
logs/debug.log
logs/*.c

# logs 폴더 바로 안, 또는 그 안의 다른 폴더(들) 안의 debug.log
logs/**/debug.log
──────────────────────────────

》 git add [파일 이름]
》 git add . : 모든 파일 넣기 
》 git add을 캡슐 안에 넣는 명령어

》 git diff > 추가, 변경, 삭제 부분을 확인할 수 있다
	k : 위로, j : 아래 , q : 나가기

》 git log  > 소스트리 확인
	k : 위로, j : 아래 , q : 나가기

》 git commit -m ["원하는 텍스트 입력"] : commit입력

》 git commit -am "메시지" < untracked파일이 없을 때 사용가능

》 git reset --hard (돌아갈 커밋 해시) < log에서 학인할 수 있는 commit의 해시

》 git revert (되돌릴 커밋 해시)  < 해시에 맞는 곳에서 실행된 것을 되돌려서 history올림
git revert오류시
》 git rm 파일명 < 파일 삭제 명령어
》 git revert --continue < 오류를 어떻게 처리할지 선택했으면 입력

》 git revert --no-commit (되돌릴  커밋 해시) < 위치에 commit이 되지 않은 상태로감
돌아가기 "git reset --hard"

──────────────────────────────
branch

》 git branch (브랜치 이름): 브랜치 생성

》 git branch : 브랜치 확인

》 git switch (브랜치 이름) : 현재 파일 브랜치에 넣기

》 git switch -c (브랜치 이름) : git branch (브랜치 이름) + git switch (브랜치 이름) 한것

》 git branch -d (삭제할 브랜치명) : 브랜치 삭제

》 git branch -D (삭제할 브랜치명) : 강제 삭제

》 git branch -m (기존  브랜치명) (새 브랜치명) : 이름 바꾸기
──────────────────────────────
merge, rebase

》 git merge (합칠 브랜치) : 현재 브랜치에 합침(브랜치 남아 있음)
* 합쳐진 브런치가 필요 없으면 삭제해도 됨

》 git rebase (뒤에 붙이고 싶은 브랜치) : 현재 브랜치에 붙이는게 아닌 붙으로 가는 것
* 뒤에 붙는거라서 하나로 합칠려면 원래 브랜치에서 
	merge로 뒤에 붙은 브랜치를 합치고 지워	야함

──────────────────────────────
충돌시 

Accept Current change | Accept Incoming Change | Accept Both Changes | Compare 
충돌 위치에서 위에 4개중 선택(클랙)

》 git merge --abort : merge중단 이전으로 돌리기

충돌 해결시
》 git add. → git commit(설명x) : 다시 넣어서 커밋달기(커밋작성 마음대로)

》git push - github에 넣기
